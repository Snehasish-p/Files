What is SQL?
Structured Query Language
SQL is a language which is used to communicate with the databases. Basically it is used as front end to many databases (mysql, postgresql, oracle, sybase)


When do you need a Database?
Basically, Databases are collections of tables. We need databases to store the data. We use databases for uses like Live Queries, Report Generation, Normalization, foreign keys, joins, etc. Also, Data is extracted and analyzed in another application.


Variable Types
Numeric
INTEGER, SMALLINT, BIGINT
NUMERIC(w,d), DECIMAL(w,d) - numbers with width w and d decimal places
REAL, DOUBLE PRECISION - machine and database dependent
FLOAT(p) - floating point number with p binary digits of precision

Character
CHARACTER(L) - a fixed-length character of length L
CHARACTER VARYING(L) or VARCHAR(L) - supports maximum length of L

Binary
BIT(L), BIT VARYING(L) - like corresponding characters
BINARY LARGE OBJECT(L) or BLOB(L)

Temporal
DATE
TIME
TIMESTAMP


CREATE TABLE statement

CREATE TABLE kids(id CHAR(6),
race SMALLINT,
age DECIMAL(6,3),
height DECIMAL(7,3),
weight DECIMAL(7,3),
sex SMALLINT);


INSERT INTO kids VALUES(100011,2,10.346, 148.5,38.95,1);

UPDATE kids SET weight=weight + 1 WHERE id=’101311’ AND age BETWEEN 9 and 10;

SELECT columns or computations
FROM table
WHERE condition
GROUP BY columns
HAVING condition
ORDER BY column [ASC | DESC]
LIMIT offset,count;



AND
select * from employees where gender = 'F' AND department = 'Tools'

IN
select * from employees where department IN ('Sports', 'Clothing', 'Tools')

IS NULL
select * from employees where email IS NULL

IS NOT NULL
select * from employees where email IS NOT NULL

BETWEEN
select * from employees where salary BETWEEN 30000 AND 40000

DISTINCT
select DISTINCT department from employees

ORDER BY
select  * from employees ORDER BY department

LIMIT
select  * from employees LIMIT 10

FETCH
select  * from employees FETCH FIRST 10 ROWS ONLY

AS (Renaming Column)
select email, salary as yearly_salary from employees

LIKE
SELECT * from students where student_name LIKE '%ch%'  or student_name like '%nd';

UPPER()
SELECT UPPER(first_name) from employees

LOWER()
SELECT LOWER(first_name) from employees

LENGTH()
SELECT LENGTH(first_name) from employees

TRIM()
SELECT TRIM(first_name) from employees
SELECT TRIM('  ABCD  ')

Concatenation
SELECT first_name || ' ' || last_name as full_name from employees

Boolean Expression
SELECT first_name, last_name, salary, (salary > 150000) as higher_salary from employees
SELECT department, (department IN ('Sports', 'Tools')) from employees

SUBSTRING()
select SUBSTRING('India is a beautiful Country' FROM 7 FOR 6)
Output: is a b
select SUBSTRING('India is a beautiful Country' FROM 7)
Output: is a beautiful Country

REPLACE()
SELECT department, REPLACE (department, 'Clothing', 'Attire') as modified_dept from employees;

POSITION()
SELECT POSITION('@' IN email) from employees;

COALESCE()
It will replace all the null values of column email with NA
select COALESCE(email, 'NA') from employees

MAX()
select MAX(salary) from employees

MIN()
select MIN(salary) from employees

AVG()
select AVG(salary) from employees

COUNT()
select count(email) from employees

Subqueries
select a.first_name, a.salary 
from (select * from employees where salary > 150000) a;
select first_name, salary 
from (select * from employees where salary > 150000) a;
select a.f_name, a.y_salary 
from (select first_name f_name, salary as y_salary from employees where salary > 150000) a;
select first_name, department, (salary - (select max(salary) from employees)) as diff from employees 
where region_id in (select region_id from regions where country in ('Asia', 'Canada'));

CASE
Select first_name, salary,
CASE 
    When salary > 100000 AND salary < 150000 then 'Good Salary'
    When salary < 100000 then 'Underpaid'
    Else 'Overpaid'
END as Situation
from employees;

Select 
CASE 
    When salary > 100000 AND salary < 150000 then 'Good Salary'
    When salary < 100000 then 'Underpaid'
    Else 'Overpaid'
END as Situation, count(*)
from employees
group by Situation;

Transpose the output
select sum(CASE When salary > 100000 AND salary < 150000 then 1 Else 0 End) as Good_Salary,
sum(CASE When salary < 100000 then 1 Else 0 End) as Underpaid,
sum(CASE When salary > 150000 then 1 Else 0 End) as Overpaid
from employees;

select sum(a.Winter1) as Winter, sum(a.Summer1) as Summer
from (
select case when season = 'Winter' then supply*cost_per_unit end Winter1,
       case when season = 'Summer' then supply*cost_per_unit end Summer1
from fruit_imports ) a 


Correlated Subqueries
Write a query where no. of employees working in a department is > than 38
select department, count(*) from employees as e1
where (select count(department) from employees as e2 where e1.department = e2.department) > 38
group by department;

Write a query where no. of employees working in a department is > than 38 and get the max salary of the employee working in that department.
select department, (select max(salary) from employees where department = d.department) from departments as d
where (select count(*) from employees as e where d.department = e.department) > 38;

Write a query that shows department name, first_name and salary of the highest and lowest paid employee in that department and if the salary is highest then it should show HIGHEST SALARY in the 4th column or LOWEST SALARY
Select department, first_name, salary,
case when salary = max_salary then 'HIGHEST SALARY'
     when salary = min_salary then 'LOWEST SALARY'
END     
from  
    (
Select department, first_name, salary, 
(select max(salary) from employees as e2 where e1.department = e2.department) as max_salary, 
(select min(salary) from employees as e2 where e1.department = e2.department) as min_salary
from employees as e1
    ) a
where salary = max_salary or salary = min_salary
order by department;




Union (It includes all the distinct values from both the statement)
select distinct department from employees union 
select department from departments;

Union All (It includes all the values from the 1st statement and then all the values from the 2nd statement)
select distinct department from employees union All
select department from departments;

select department, count(*) from employees group by department union all 
select 'Total', count(*) from employees;


Except (It includes all the non- common entries from the 1st table)
select distinct department from employees except 
select department from departments;


View
create view v_employees as 
select first_name, salary, e.department, division, country 
from employees e inner join departments d on e.department = d.department inner join regions r on e.region_id = r.region_id;

Over()
This query is similar to what group by does, but in group by select statement its difficult to use more columns and get counts also but by using Over() we can do this.
This query returns the name, department and the no.of employee in that department.
select first_name, department, count(*) over(partition by department) from employees;

This query returns the name, department and the no.of employee, region_id and the no.of employee in that region.
select first_name, department, 
count(*) over(partition by department),
region_id,
count(*) over(partition by region_id)
from employees;

This query returns the name, salary and sum of salaries by each row as running total salaries which are order by name.
select first_name, salary,  
sum(salary) over(order by first_name range between unbounded preceding and current row) as sum_salaries
from employees;

Result will be same as the upper query.
select first_name, salary,  
sum(salary) over(order by first_name) as sum_salaries
from employees;

This query first groups by department and then order by name and salaries are added of each row.
select first_name, department, salary,  
sum(salary) over(partition by department order by first_name) as sum_salaries
from employees;

Sum of the adjacent rows salaries.
select first_name, hire_date, department, salary,  
sum(salary) over(order by hire_date rows between 1 preceding and current row) as sum_adjacent_salaries
from employees;

Sum of the 4 adjacent rows salaries.
select first_name, hire_date, department, salary,  
sum(salary) over(order by hire_date rows between 3 preceding and current row) as sum_adjacent_salaries
from employees;


RANK()
select first_name, department, salary,  
Rank() over(partition by department order by salary) 
from employees;

select * from (
select first_name, department, salary,  
Rank() over(partition by department order by salary) 
from employees
    ) a
Where rank = 1


NTILE()
It will divide the departments into 5 parts
select first_name, department, salary,  
ntile(5) over(partition by department order by salary) 
from employees;

FIRST_VALUE()
select first_name, department, salary,  
first_value(salary) over(partition by department order by salary) 
from employees;

Nth_VALUE()
select first_name, department, salary,  
nth_value(salary, 5) over(partition by department order by salary) 
from employees;